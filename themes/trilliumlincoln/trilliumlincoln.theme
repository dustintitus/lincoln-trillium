<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Unicode;

function trilliumlincoln_preprocess_page(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

function trilliumlincoln_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#id']) && !empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion();
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  } else if (isset($variables['elements']['#configuration']['region'])) {
    $suggestions[] = 'block__page_' . $variables['elements']['#configuration']['region'];
    $suggestions[] = 'block__page_' . $variables['elements']['#configuration']['region'] . '__' . end(explode(':', $variables['elements']['#plugin_id']));
  }

  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  
  if ($blockType == "block_content") {
    if (isset($block['content']['#block_content'])) {
      if (!empty($block['content']['#block_content'])) {
        $bundle = $block['content']['#block_content']->bundle();
        $suggestions[] = 'block__' . $bundle;
      }
    }
  }

  return $suggestions;
}

function trilliumlincoln_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
  return $suggestions;
}

function trilliumlincoln_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $suggestions[] = sprintf('views_view__%s__fields', $variables['view']->id());
  $suggestions[] = sprintf('views_view__%s__%s__fields', $variables['view']->id(), $variables['view']->current_display);
  return $suggestions;  
}

function trilliumlincoln_preprocess_field(&$variables){
  if($variables['field_name'] == 'field_car_images'){
    $public_path = file_create_url("public://"); 
    foreach ($variables['items'] as $key => $value) {
      $uri = urldecode(str_replace($public_path, 'public://', $value['content']['#url']->getUri()));
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('1050x800');
      $url = $style->buildUrl($uri);
      $variables['items'][$key]['content']['#url']->setOption('data-preview-url', $url);
    }
  }

  if ($variables['field_name'] == 'price') {
    $product = $variables['element'];
    $price_field = $product['#object']->get('price')->getValue();
    if (!empty($price_field)) {
      $price = $price_field[0]['number'];
      if ($price == 0) {
        $field_note = $product['#object']->get('field_note')->getValue();
        $note = Markup::create( html_entity_decode('Call for more details') );
        if (!empty($field_note[0]['value'])) {
          $note = $field_note[0]['value'];
        }
        $variables['items'][0]['content']['#markup'] = $note;
      }
    }
  }

  if ($variables['field_name'] == 'body') {
    $element = $variables['element'];
    if ($element['#bundle'] == 'car' && $element['#view_mode'] == 'teaser') {
      $field_body = $element['#object']->get('body')->getValue();
      if (!empty($field_body[0]['value'])) {
        $body = Unicode::truncate($field_body[0]['value'], 340, false, true);
        $body = strip_tags($body, '<br><p>');
        $body = preg_replace("/[\n\r]/","", $body);
        $variables['items'][0]['content']['#text'] = Markup::create($body);
      }
    }
  }
}

function trilliumlincoln_preprocess_html(&$variables) {
  global $base_url, $base_path;

  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  $variables['#attached']['drupalSettings']['path']['logoUrl'] = $base_url . '/' . \Drupal::theme()->getActiveTheme()->getPath() . '/images/ico-lincoln.png';
  $variables['#attached']['drupalSettings']['path']['siteUrl'] = $base_url;
}

function trilliumlincoln_page_attachments_alter(array &$page) {
  $viewport = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no',
    ),
  );
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

function trilliumlincoln_preprocess_paragraph__text_block(&$variables){
  $paragraph = $variables['paragraph'];
  if($paragraph->hasField('field_p__text_block__classes') && !$paragraph->field_p__text_block__classes->isEmpty()){
    $variables['paragraph_classes'] = $paragraph->field_p__text_block__classes->first()->value;
  }
}

function trilliumlincoln_preprocess_paragraph__text_blocks(&$variables){
  $paragraph = $variables['paragraph'];
  if($paragraph->hasField('field_p__text_block__classes') && !$paragraph->field_p__text_block__classes->isEmpty()){
    $variables['paragraph_classes'] = $paragraph->field_p__text_block__classes->first()->value;
  }
}

/**
 * Prepares variables for product templates.
 *
 * Default template: commerce-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function trilliumlincoln_preprocess_commerce_product(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $variables['elements']['#commerce_product'];
  $product_id = $product->id();
  if ($variables['elements']['#view_mode'] == 'full') {
    // get the view machine id
    $view = \Drupal\views\Views::getView('product_list');
     
    // set the display machine id
    $view->setDisplay('page_1');
    if (isset($_SESSION['search-car-filter'])) {
      $view->setExposedInput($_SESSION['search-car-filter']);
    }
    $view->setItemsPerPage(0);
    $view->execute();
    $result = $view->result;
    $result_ids = [];
    if (!empty($result)) {
      foreach ($result as $key => $value) {
        $entity = $value->_entity;
        $entity_id = $entity->id();
        $result_ids[] = $entity_id;
      }
    }

    $nav = [];
    if (!empty($result_ids)) {
      foreach ($result_ids as $key => $value) {
        if ($product_id == $value) {
          if (isset($result_ids[$key-1])) {
            $nav['prev'] = Link::fromTextAndUrl(t('<<'), Url::fromUri('internal:/product/' . $result_ids[$key-1], ['attributes' => ['class' => ['prev', 'btn', 'btn-info', 'btn-lg']]]))->toString();
          }
          if (isset($result_ids[$key+1])) {
            $nav['next'] = Link::fromTextAndUrl(t('>>'), Url::fromUri('internal:/product/' . $result_ids[$key+1],['attributes' => ['class' => ['next', 'btn', 'btn-info', 'btn-lg']]]))->toString();
          }
        }
      }
    }

    $variables['car_nav'] = $nav;

    $field_car_type = $product->get('field_car_type')->getValue();
    if (isset($field_car_type[0]['target_id'])) {
      $car_type_id = $field_car_type[0]['target_id'];
      $car_type = Drupal\taxonomy\Entity\Term::load($car_type_id);
      $car_type_name = $car_type->getName();
      $clean_car_type_name = \Drupal::service('pathauto.alias_cleaner')->cleanString($car_type_name);
      $back_button = Link::fromTextAndUrl(t('< Back'), Url::fromUri('internal:/search/' . $clean_car_type_name, ['attributes' => ['class' => ['btn-info', 'back-button', 'btn', 'btn-lg']]]))->toString();
      $variables['back_button'] = $back_button;

      if ($car_type_name == 'New') {
        $form = \Drupal::formBuilder()->getForm('\Drupal\trilliumlincoln_utility\Form\TrilliumlincolnPaymentCalculatorForm');
        $variables['calculator_form'] = $form;
      }
    }
  }
  if ($variables['elements']['#view_mode'] == 'preview') {
    $fields_list = [
      'field_finance_36_term_rate' => 'Finance 36 Term Rate',
      'field_finance_39_term_rate' => 'Finance 39 Term Rate',
      'field_finance_48_term_rate' => 'Finance 48 Term Rate',
      'field_finance_60_term_rate' => 'Finance 60 Term Rate',
      'field_finance_72_term_rate' => 'Finance 72 Term Rate',
      'field_lease_24_term_rate' => 'Lease 24 Term Rate',
      'field_lease_36_term_rate' => 'Lease 36 Term Rate',
      'field_lease_39_term_rate' => 'Lease 39 Term Rate',
      'field_lease_48_term_rate' => 'Lease 48 Term Rate',
      'field_residual_24_term_rate' => 'Residual 24 Term Rate',
      'field_residual_36_term_rate' => 'Residual 36 Term Rate',
      'field_residual_39_term_rate' => 'Residual 39 Term Rate',
      'field_residual_48_term_rate' => 'Residual 48 Term Rate'
    ];

    foreach ($fields_list as $field_key => $field_label) {
      if (!isset($variables['product'][$field_key][0]['#markup'])) {
        $variables['product'][$field_key][0] = [
          '#markup' => '<div class="field"><div class="field--label">' . $field_label . '</div>' . '<div class="field--item">N/A</div></div>'
        ];
      }
    }
  }
}

function trilliumlincoln_preprocess_select(&$variables) {
  $element = $variables['element'];
  if (isset($element['#options_attribute'])) {
    if (!empty($variables['options'])) {
      foreach ($variables['options'] as $option_key => $option_value) {
        if (isset($element['#options_attribute'][$option_value['value']])) {
          $option_attributes = $element['#options_attribute'][$option_value['value']];
          if (!empty($option_attributes)) {
            foreach ($option_attributes as $attribute_key => $attribute_value) {
              $variables['options'][$option_key]['attribute'][] = [
                'key' => $attribute_key,
                'value' => $attribute_value
              ];
            }
          }
        }
      }
    }
  }
}

function trilliumlincoln_preprocess_block(&$variables) {
  if (isset($variables['label']) && is_array($variables['label'])) {
    $html_tags = NULL;
    $string = '';
    if (isset($variables['label']['#markup'])) {
      $string = $variables['label']['#markup'];
    }
    if (isset($variables['label']['#allowed_tags'])) {
      $html_tags = $variables['label']['#allowed_tags'];
    }
    $variables['label'] = Xss::filter($string, $html_tags);
  }
}


function trilliumlincoln_preprocess_menu(&$vars) {
  if(isset($vars['menu_name']) && $vars['menu_name'] === 'main') {
    foreach($vars['items'] as $key => $item){
      $title = $item['title'];
      $vars['items'][$key]['title'] = Markup::create($title);
    }
  }
}

function trilliumlincoln_preprocess_responsive_image(&$variables){
  $variables['img_element']['#attributes'] = ['data-width' =>$variables['width'], 'data-height'=>$variables['height'],'data-modile-width' =>642, 'data-mobile-height'=>785];
}
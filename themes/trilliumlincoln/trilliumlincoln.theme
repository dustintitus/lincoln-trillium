<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Render\Markup;
use Drupal\file\Entity\File;

function trilliumlincoln_preprocess_page(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

function trilliumlincoln_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#id']) && !empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion();
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  } else if (isset($variables['elements']['#configuration']['region'])) {
    $suggestions[] = 'block__page_' . $variables['elements']['#configuration']['region'];
    $suggestions[] = 'block__page_' . $variables['elements']['#configuration']['region'] . '__' . end(explode(':', $variables['elements']['#plugin_id']));
  }

  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  
  if ($blockType == "block_content") {
    $bundle = $block['content']['#block_content']->bundle();
    $suggestions[] = 'block__' . $bundle;
  }

  return $suggestions;
}

function trilliumlincoln_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
  return $suggestions;
}

function trilliumlincoln_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $suggestions[] = sprintf('views_view__%s__fields', $variables['view']->id());
  $suggestions[] = sprintf('views_view__%s__%s__fields', $variables['view']->id(), $variables['view']->current_display);
  return $suggestions;  
}

function trilliumlincoln_preprocess_field(&$variables){
  if($variables['field_name'] == 'field_car_images'){
    $public_path = file_create_url("public://"); 
    foreach ($variables['items'] as $key => $value) {
      $uri = urldecode(str_replace($public_path, 'public://', $value['content']['#url']->getUri()));
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('1050x800');
      $url = $style->buildUrl($uri);
      $variables['items'][$key]['content']['#url']->setOption('data-preview-url', $url);
    }
  }
}

function trilliumlincoln_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
}

function trilliumlincoln_page_attachments_alter(array &$page) {
  $viewport = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no',
    ),
  );
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

function trilliumlincoln_preprocess_paragraph__text_block(&$variables){
  $paragraph = $variables['paragraph'];
  if($paragraph->hasField('field_p__text_block__classes') && !$paragraph->field_p__text_block__classes->isEmpty()){
    $variables['paragraph_classes'] = $paragraph->field_p__text_block__classes->first()->value;
  }
}

function trilliumlincoln_preprocess_paragraph__text_blocks(&$variables){
  $paragraph = $variables['paragraph'];
  if($paragraph->hasField('field_p__text_block__classes') && !$paragraph->field_p__text_block__classes->isEmpty()){
    $variables['paragraph_classes'] = $paragraph->field_p__text_block__classes->first()->value;
  }
}

/**
 * Prepares variables for product templates.
 *
 * Default template: commerce-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function trilliumlincoln_preprocess_commerce_product(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $variables['elements']['#commerce_product'];
  if ($variables['elements']['#view_mode'] == 'full') {
    $field_car_type = $product->get('field_car_type')->getValue();
    if (isset($field_car_type[0]['target_id'])) {
      $car_type_id = $field_car_type[0]['target_id'];
      $car_type = Drupal\taxonomy\Entity\Term::load($car_type_id);
      $car_type_name = $car_type->getName();
      if ($car_type_name == 'New') {
        $form = \Drupal::formBuilder()->getForm('\Drupal\trilliumlincoln_utility\Form\TrilliumlincolnPaymentCalculatorForm');
        $variables['calculator_form'] = $form;
      }
    }

    $field_car_images = $product->get('field_car_images')->getValue();
    if (!empty($field_car_images)) {
      $car_image_file = File::load($field_car_images[0]['target_id']);
      if (!empty($car_image_file)) {
        $uri = $car_image_file->getFileUri();
        $url = file_create_url($uri);
        $variables['main_car_image'] = Markup::create('<img class="img-responsive" src="' . $url . '">');
      }
    }
  }
}

function trilliumlincoln_preprocess_select(&$variables) {
  $element = $variables['element'];
  if (isset($element['#options_attribute'])) {
    if (!empty($variables['options'])) {
      foreach ($variables['options'] as $option_key => $option_value) {
        if (isset($element['#options_attribute'][$option_value['value']])) {
          $option_attributes = $element['#options_attribute'][$option_value['value']];
          if (!empty($option_attributes)) {
            foreach ($option_attributes as $attribute_key => $attribute_value) {
              $variables['options'][$option_key]['attribute'][] = [
                'key' => $attribute_key,
                'value' => $attribute_value
              ];
            }
          }
        }
      }
    }
  }
}